/**
 * {file_name}
 * This file was generated by the db-schema-generator
 *
 * Happy Hacking!
**/

use crate::schema::GroupDataByBoro;
use diesel::prelude::*;


#[derive(Debug,GraphQLObject,Insertable,Queryable,)]
#[table_name="GroupDataByBoro"]
pub struct GroupDataByBoroT {
    pub id: i32,
    pub group: Option<String>,
    pub subgroup: Option<String>,
    pub BK_CASE_COUNT: Option<f64>,
    pub BK_HOSPITALIZED_COUNT: Option<f64>,
    pub BK_DEATH_COUNT: Option<f64>,
    pub BK_CASE_RATE: Option<f64>,
    pub BK_HOSPITALIZED_RATE: Option<f64>,
    pub BK_DEATH_RATE: Option<f64>,
    pub BX_CASE_COUNT: Option<f64>,
    pub BX_HOSPITALIZED_COUNT: Option<f64>,
    pub BX_DEATH_COUNT: Option<f64>,
    pub BX_CASE_RATE: Option<f64>,
    pub BX_HOSPITALIZED_RATE: Option<f64>,
    pub BX_DEATH_RATE: Option<f64>,
    pub MN_CASE_COUNT: Option<f64>,
    pub MN_HOSPITALIZED_COUNT: Option<f64>,
    pub MN_DEATH_COUNT: Option<f64>,
    pub MN_CASE_RATE: Option<f64>,
    pub MN_HOSPITALIZED_RATE: Option<f64>,
    pub MN_DEATH_RATE: Option<f64>,
    pub QN_CASE_COUNT: Option<f64>,
    pub QN_HOSPITALIZED_COUNT: Option<f64>,
    pub QN_DEATH_COUNT: Option<f64>,
    pub QN_CASE_RATE: Option<f64>,
    pub QN_HOSPITALIZED_RATE: Option<f64>,
    pub QN_DEATH_RATE: Option<f64>,
    pub SI_CASE_COUNT: Option<f64>,
    pub SI_HOSPITALIZED_COUNT: Option<f64>,
    pub SI_DEATH_COUNT: Option<f64>,
    pub SI_CASE_RATE: Option<f64>,
    pub SI_HOSPITALIZED_RATE: Option<f64>,
    pub SI_DEATH_RATE: Option<f64>,
    pub date: Option<String>,
}

pub fn read(conn: &PgConnection) -> Vec<GroupDataByBoroT> {
    GroupDataByBoro::table
        .order(GroupDataByBoro::date.asc())
        .load::<GroupDataByBoroT>(conn)
        .expect("Error loading object")
}
